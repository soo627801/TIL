#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
import cv2
import numpy as np

from ros_robot_controller.rrc import Board


class LineTrackingMotorControl(Node):
    def __init__(self):
        super().__init__('line_tracking_motor_node')
        self.bridge = CvBridge()
        self.board = Board()

        self.create_subscription(
            Image,
            '/ascamera_hp60c/camera_publisher/rgb0/image',
            self.image_callback,
            10
        )

        cv2.namedWindow("Line Tracking", cv2.WINDOW_NORMAL)
        cv2.namedWindow("Mask View", cv2.WINDOW_NORMAL)

        # HSV 범위를 더 엄격하게 조정 (밝은 흰색만 인식)
        self.lower_hsv = np.array([0, 0, 200])
        self.upper_hsv = np.array([180, 30, 255])
        
        # 이전 프레임의 중심점 저장 (연속성 확인용)
        self.prev_cx = None
        self.no_line_count = 0  # 라인이 없는 프레임 카운트

    def crop_region(self, img):
        h, w, _ = img.shape
        return img[int(0.5 * h):, :], int(0.5 * h), 0

    def set_forward(self, speed=0.4):
        self.board.set_motor_speed([[2, speed], [4, -speed]])

    def turn_left(self, speed=0.1):
        self.board.set_motor_speed([[2, speed], [4, speed]])

    def turn_right(self, speed=0.1):
        self.board.set_motor_speed([[2, -speed], [4, -speed]])

    def stop(self):
        self.board.set_motor_speed([[2, 0], [4, 0]])

    def filter_contours(self, contours, min_area=500):
        """컨투어를 크기와 모양으로 필터링"""
        filtered = []
        for contour in contours:
            area = cv2.contourArea(contour)
            if area > min_area:
                # 종횡비 확인 (차선은 일반적으로 세로가 긴 형태)
                x, y, w, h = cv2.boundingRect(contour)
                aspect_ratio = h / w if w > 0 else 0
                if aspect_ratio > 0.3:  # 너무 납작한 형태는 제외
                    filtered.append(contour)
        return filtered

    def is_valid_center(self, cx, frame_width):
        """중심점이 유효한지 확인 (이전 프레임과의 연속성 고려)"""
        if self.prev_cx is None:
            return True
        
        # 이전 중심점과의 거리 확인
        distance = abs(cx - self.prev_cx)
        max_distance = frame_width * 0.3  # 프레임 너비의 30% 이상 벗어나면 무시
        
        return distance < max_distance

    def image_callback(self, msg):
        frame = self.bridge.imgmsg_to_cv2(msg, desired_encoding='bgr8')
        cropped, h_offset, w_offset = self.crop_region(frame)

        # 더 강한 블러 적용으로 노이즈 제거
        blurred = cv2.GaussianBlur(cropped, (9, 9), 0)
        hsv = cv2.cvtColor(blurred, cv2.COLOR_BGR2HSV)
        mask = cv2.inRange(hsv, self.lower_hsv, self.upper_hsv)
        
        # 모폴로지 연산 강화
        kernel = np.ones((3, 3), np.uint8)
        mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel, iterations=2)
        mask = cv2.erode(mask, kernel, iterations=1)
        mask = cv2.dilate(mask, kernel, iterations=3)

        contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        # 컨투어 필터링
        filtered_contours = self.filter_contours(contours)

        move_forward = False
        cx = None
        center_type = None

        if len(filtered_contours) >= 2:
            # 가장 큰 두 개의 컨투어 선택
            sorted_contours = sorted(filtered_contours, key=cv2.contourArea, reverse=True)[:2]
            centers = []

            for contour in sorted_contours:
                M = cv2.moments(contour)
                if M['m00'] != 0:
                    cx_i = int(M['m10'] / M['m00']) + w_offset
                    cy_i = int(M['m01'] / M['m00']) + h_offset
                    centers.append((cx_i, cy_i))
                    cv2.drawContours(frame[h_offset:, w_offset:], [contour], -1, (255, 255, 0), 2)

            if len(centers) == 2:
                # 두 중심점의 x 좌표 차이 확인 (너무 가까우면 같은 라인일 가능성)
                x_diff = abs(centers[0][0] - centers[1][0])
                if x_diff > frame.shape[1] * 0.1:  # 프레임 너비의 10% 이상 떨어져 있어야 함
                    temp_cx = (centers[0][0] + centers[1][0]) // 2
                    
                    # 연속성 확인
                    if self.is_valid_center(temp_cx, frame.shape[1]):
                        cx = temp_cx
                        cy = (centers[0][1] + centers[1][1]) // 2
                        cv2.circle(frame, (cx, cy), 7, (0, 255, 0), -1)
                        move_forward = True
                        center_type = "midpoint"
                        self.no_line_count = 0

        elif len(filtered_contours) == 1:
            contour = filtered_contours[0]
            M = cv2.moments(contour)
            if M['m00'] != 0:
                temp_cx = int(M['m10'] / M['m00']) + w_offset
                
                # 연속성 확인
                if self.is_valid_center(temp_cx, frame.shape[1]):
                    cx = temp_cx
                    cy = int(M['m01'] / M['m00']) + h_offset
                    cv2.drawContours(frame[h_offset:, w_offset:], [contour], -1, (255, 255, 0), 2)
                    cv2.circle(frame, (cx, cy), 7, (0, 255, 255), -1)
                    move_forward = True
                    center_type = "single"
                    self.no_line_count = 0

        if move_forward and cx is not None:
            frame_center = frame.shape[1] // 2
            error = cx - frame_center

            if center_type == "midpoint":
                # 더 정밀한 제어를 위해 임계값 조정
                if abs(error) < 60:
                    self.set_forward()
                elif error < -60:
                    self.turn_left()
                elif error > 60:
                    self.turn_right()
            elif center_type == "single":
                # 단일 라인일 때도 약간의 조정 허용
                if abs(error) < 100:
                    self.set_forward()
                elif error < -100:
                    self.turn_left(0.05)  # 더 부드러운 회전
                elif error > 100:
                    self.turn_right(0.05)
            
            # 유효한 중심점 업데이트
            self.prev_cx = cx
        else:
            self.no_line_count += 1
            # 몇 프레임 동안 라인이 없으면 정지, 그 전까지는 직진 유지
            if self.no_line_count > 5:
                self.stop()
            else:
                self.set_forward(0.2)  # 천천히 직진

        # 영역 표시
        cv2.rectangle(
            frame,
            (w_offset, h_offset),
            (frame.shape[1], frame.shape[0]),
            (0, 0, 255),
            2
        )
        
        # 중심선 표시
        frame_center = frame.shape[1] // 2
        cv2.line(frame, (frame_center, h_offset), (frame_center, frame.shape[0]), (255, 0, 0), 2)
        
        cv2.imshow("Line Tracking", frame)
        cv2.imshow("Mask View", mask)
        cv2.waitKey(5)


def main():
    rclpy.init()
    node = LineTrackingMotorControl()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.stop()
        node.destroy_node()
        rclpy.shutdown()
        cv2.destroyAllWindows()


if __name__ == '__main__':
    main()