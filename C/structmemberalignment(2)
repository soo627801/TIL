// 데이터 전송이나 저장 시 구조체 정렬을 피하려면?
// c언어에서는 구조체를 정렬하는 표준 방법이 없음.
// 대신 각 컴파일러에서 제공하는 특별한 지시자를 사용하면 구조체 정렬 크기 조절 가능

// Visual Studio, GCC 4.0 이상
//#pragma pack(push, 정렬크기)
//#pragma pack(pop)

// GCC 4.0 미만
//__attribute__((aligned(정렬크기), packed))


#include <stdio.h>

#pragma pack(push, 1)       // 1바이트 크기로 정렬 * c언어에서 자료형의 크기는 바이트 단위이고, 가장 작은 크기는 1바이트임. *
struct PacketHeader {
    char flags;             // 1바이트
    int seq;                // 4바이트
};
#pragma pack(pop)           // 정렬 설정을 이전 상태(기본값)로 되돌림

int main() {
    struct PacketHeader header;
    
    printf("%d\n", sizeof(header.flags));       // 1 : char는 1바이트
    printf("%d\n", sizeof(header.seq));         // 4 : int는 4바이트
    printf("%d\n", sizeof(header));             // 5 : 1바이트 단위로 정렬했으므로 구조체 전체 크기는 5바이트
    
    return 0;
}


#include <stdio.h>
#include <stddef.h>     // offsetof 매크로가 정의된 헤더 파일

#pragma pack(push, 1)   // 1바이트 크기로 정렬
struct PacketHeader {
    char flags;         // 1바이트
    int seq;            // 4바이트
};
#pragma pack(pop)       // 정렬 설정을 이전 상태(기본값)로 되돌림

int main() {
    printf("%d\n", offsetof(struct PacketHeader, flags));
    printf("%d\n", offsetof(struct PacketHeader, seq));
    
    return 0;
}
// 구조체를 1바이트 단위로 정렬했음 -> seq의 상대 위치는 1이 나옴.
// 즉, 자료형 크기 그대로이기 때문에 char flags 바로 뒤에 int seq가 와서 1이 됨.

// 구조체를 1바이트 크기로 정렬하는 것은 구조체의 내용을 파일에 쓰거나 네트워크로 전송할 때 꼭 필요하다는 점만 알아두면 됨.
