// 구조체와 메모리 복사하기
// 매번 내용이 같은 구조체를 만드려면 번거로움.
// 이미 생성하여 값을 저장한 구조체나 메모리를 다른 곳에 복사할 경우 많음.
// -> memcpy 함수 사용하여 메모리의 내용을 다른 곳으로 복사 가능
// memcpy(목적지 포인터, 원본 포인터, 크기);
//      void *memcpy(void *_Dst, void const *_Src, size_t_Size);
//      목적지 포인터 반환

#include <stdio.h>
#include <string.h>     // memcpy 함수가 선언된 헤더 파일

struct Point2D {
    int x;
    int y;
};

int main(void)
{
    struct Point2D p1;
    struct Point2D p2;
    
    p1.x = 10;      // p1의 멤버에만 값 저장
    p1.y = 20;      // p1의 멤버에만 값 저장
    
    memcpy(&p2, &p1, sizeof(struct Point2D));       // Point2D 구조체 크기만큼 p1의 내용을 p2로 복사
    
    printf("%d %d\n", p2.x, p2.y);                  // 10 20 : p1의 내용을 p2로 복사했으므로 10 20
    
    return 0;
}

// malloc 함수로 할당한 동적 메모리끼리 복사하는 방법
#include <stdio.h>
#include <stdlib.h>     // malloc, free 함수가 선언된 헤더 파일
#include <string.h>     // memcpy 함수가 선언된 헤더 파일

struct Point2D {
    int x;
    int y;
};

int main(void) {
    struct Point2D *p1 = malloc(sizeof(struct Point2D));
    struct Point2D *p2 = malloc(sizeof(struct Point2D));
    
    p1->x = 10;     // p1의 멤버에만 값 저장
    p1->y = 20;     // p1의 멤버에만 값 저장
    
    memcpy(p2, p1, sizeof(struct Point2D));     // Point2D 구조체 크기만큼 p1의 내용을 p2로 복사
    printf("%d %d\n", p2->x, p2->y);            // 10 20 : p1의 내용을 p2로 복사했으므로 10 20
    
    free(p2);
    free(p1);
    
    return 0;
}

// 구조체 변수에서 동적 메모리로, 동적 메모리에서 구조체 변수로 내용 복사도 가능함
struct Point2D p1;
struct Point2D *p2 = malloc(sizeof(struct Point2D));
memcpy(p2, &p1, sizeof(struct Point2D));        // 구조체 변수에서 동적 메모리로 복사
//
struct Point2D *p1 = malloc(sizeof(struct Point2D));
struct Point2D p2;
memcpy(&p2, p1, sizeof(struct Point2D));        // 동적 메모리에서 구조체 변수로 복사
