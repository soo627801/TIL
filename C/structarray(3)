// 구조체 요소가 한 번에 뭉쳐져 있는 배열이 아닌 요소마다 메모리를 할당하고 싶을 때
// -> 구조체 포인터 배열을 만들고 malloc 함수로 각 요소에 메모리 할당

// 구조체 포인터 배열은 포인터 변수 이름 뒤에 [] 붙인 뒤 크기 설정
// struct 구조체이름 *포인터이름[크기];

#include <stdio.h>
#include <stdlib.h>    // malloc, free 함수가 선언된 헤더 파일

struct Point2D {
  int x;
  int y;
};

int main() {
  struct Point2D *p[3];    // 크기가 3인 구조체 포인터 배열 선언

  // 구조체 포인터 배열 전체 크기에서 요소(구조체 포인터)의 크기로 나눠서 요소 개수 구함
  for (int i = 0; i < sizeof(p) / sizeof(struct Point2D *); i++)    // 요소 개수만큼 반복
  {
    p[i] = malloc(sizeof(struct Point2D));    // 각 요소에 구조체 크기만큼 메모리 할당
  }

  p[0]->x = 10;    // 인덱스로 요소에 접근 후, 화살표 연산자로 멤버에 접근
  p[0]->y = 20;
  p[1]->x = 30;
  p[1]->y = 40;
  p[2]->x = 50;
  p[2]->y = 60;

  printf("%d %d\n", p[0]->x, p[0]->y);    // 10 20
  printf("%d %d\n", p[1]->x, p[1]->y);    // 30 40
  printf("%d %d\n", p[2]->x, p[2]->y);    // 50 60

  for (int i = 0; i < sizeof(p) / sizeof(struct Point2D *); i++)    // 요소 개수만큼 반복
  {
    free(p[i]);    // 각 요소의 동적 메모리 해제
  }

  return 0;
}


// sizeof(struct Point2D)는 구조체가 차지하는 크기, sizeof(struct Point2D *)는 구조체 포인터의 크기임.

// 구조체 포인터 배열에서 각 요소에 접근하려면 배열 뒤에 []를 사용하며, [] 안에 인덱스를 지정해주면 됨.
// 단, 배열 안에 들어있는 요소가 포인터라서 ->를 사용하여 멤버에 접근해야 함. 
// 배열[인덱스]->멤버
