// 구조체 포인터 선언
// struct Person* p1 = malloc(sizeof(struct Person));
// 일반 변수가 아닌 포인터 변수여서 * 붙여야 됨.
// malloc 함수로 메모리 할당 시 크기를 알아야 하므로 sizeof(struct Person)과 같이 구조체 크기를 구하여 넣어줌.

// 포인터 선언 시, sizeof로 크기 구할 시 struct 키워드를 넣어줌.

/*
// 화살표 연산자로 구조체 멤버에 접근하여 값 할당
strcpy(p1->name, "홍길동");
p1->age = 30;
strcpy(p1->address, "서울시 용산구 한남동");

// 화살표 연산자로 구조체 멤버에 접근하여 값 출력
printf("이름 : %s\n", p1->name);
printf("나이 : %d\n", p1->age);
printf("주소 : %s\n", p1->address);
*/

// p1->age = 30;과 같이 구조체 포인터의 멤버에 접근한 뒤 값을 할당하고, p1->age와 같이 값을 가져옴.
// p1->name 등의 문자열 멤버는 =(할당 연산자)로 저장할 수 없으므로 strcpy 함수 사용
// 마지막으로 free(p1); 처럼 할당한 메모리 해제 (즉, 구조체에 메모리를 할당할 때는 malloc -> 사용 -> free 패턴 기억하기)


// 구조체 포인터, -> 구조체 포인터에 접근 시 -> 를 사용하는데 화살표 연산자라고 함.
// 포인터는 메모리 주소를 저장하므로 어떤 값이 있는 곳을 가리킨다는 의미가 있음. 그래서 연산자도 어떤 값이 있는 곳을 가리킨다는 의미에서 화살표 모양 사용함.


// 구조체 포인터에서 . 으로 멤버에 접근하기
// 구조체 포인터에서 멤버에 접근하려면 p1->age 와 같이 화살표 연산자를 사용하는데 괄호, 역참조를 사용하면 .으로 멤버에 접근 가능
// p1->age;			// 화살표 연산자로 멤버에 접근
// (*p1).age;		// 구조체 포인터로 역참조 후 .으로 멤버에 접근


// 구조체의 멤버가 포인터일 때 역참조하기
// 구조체의 멤버가 포인터일 때 역참조 하려면 맨 앞에 * 붙여야 됨. 이때 구조체 번수 앞에 *가 붙어있더라도 멤버의 역참조이지 구조체 변수의 역참조가 아님
// *구조체변수.멤버
// *구조체포인터->멤버


#include <stdio.h>
#include <stdlib.h>

struct Data {
	char c1;
	int* numPtr;											// 포인터
};

int main() {
	int num1 = 10;
	struct Data d1;											// 구조체 변수
	struct Data* d2 = malloc(sizeof(struct Data));		// 구조체 포인터에 메모리 할당

	d1.numPtr = &num1;
	d2->numPtr = &num1;

	printf("%d\n", *d1.numPtr);						// 10 : 구조체의 멤버 역참조
	printf("%d\n", *d2->numPtr);						// 10 : 구조체 포인터의 멤버 역참조

	d2->c1 = 'a';
	printf("%c\n", (*d2).c1);							// a : 구조체 포인터를 역참조하여 c1에 접근
															// d2->c1과 같음
	printf("%d\n", *(*d2).numPtr);					// 10 : 구조체 포인터를 역참조하여 numPtr에 접근한 뒤 다시 역참조
															// *d2->numPtr과 같음


	free(d2);

	return 0;
}



/*
- 역참조한 것을 괄호로 묶으면 구조체 변수를 역참조한 뒤 멤버에 접근한다는 뜻
- *(*d2).numPtr처럼 구조체 포인터를 역참조하여 numPtr에 접근한 뒤 다시 역참조 가능
- (*구조체포인터).멤버
- *(*구조체포인터).멤버
d2->c1 = 'a';
printf("%c\n", (*d2).c1);			// a: 구조체 포인터를 역참조하여 c1에 접근
									// d2->c1과 같음
printf("%d\n", *(*d2).numPtr);		// 10 : 구조체 포인터를 역참조하여 numPtr에 접근 후 다시 역참조
									// *d2->numPtr과 같음
*/


https://dojang.io/pluginfile.php/482/mod_page/content/32/4902.png
